from keras.models import Input,Model
from keras.layers import Dense,Flatten,Reshape
from keras.layers.convolutional import Conv2D
from keras.callbacks import EarlyStopping
from keras.models import load_model
from board_conversion import *
import chess


class NeuralNetwork :
    def init(self) :
        self.optimizer = 'Adam'
        self.loss = 'categorical_crossentropy'

    def define(self) :
        input_layer = Input(shape=(8, 8, 12))
        x = Conv2D(filters=64, kernel_size=2, strides=(2, 2))(input_layer)
        x = Conv2D(filters=128, kernel_size=2, strides=(2, 2))(x)
        x = Conv2D(filters=256, kernel_size=2, strides=(2, 2))(x)
        x = Flatten()(x)

        x = Dense(4096, activation='softmax')(x)
        output = Reshape((1, 64, 64))(x)

        model = Model(inputs=input_layer, outputs=output)
        model.compile(optimizer=self.optimzier, loss=self.loss)
        self.model = model

def filter_legal_moves(board,logits):
    filter_mask = np.zeros(logits.shape)
    legal_moves = board.legal_moves
    for legal_move in legal_moves:
        from_square = legal_move.from_square
        to_square = legal_move.to_square
        filter_mask[from_square,to_square] = 1
    new_logits = logits*filter_mask
    return new_logits
